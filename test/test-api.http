# Pruebas de API para Videoclub CAP
# Instrucciones:
# 1. Aseg√∫rate de que el servidor est√© corriendo: npm run watch
# 2. En VS Code instala la extensi√≥n "REST Client"
# 3. Haz clic en "Send Request" sobre cada ###

# Variable base para todas las peticiones
@baseUrl = http://localhost:4004
@catalogUrl = {{baseUrl}}/catalog

### ------------------------------------------------------------------------
# üè† Verificar que el servidor est√© funcionando
GET {{baseUrl}}

### ------------------------------------------------------------------------
# üìã Obtener documento de servicio
GET {{catalogUrl}}

### ------------------------------------------------------------------------
# üìã Obtener metadatos del servicio
GET {{catalogUrl}}/$metadata

### ------------------------------------------------------------------------
# üé¨ Obtener todas las pel√≠culas
GET {{catalogUrl}}/Movies

### ------------------------------------------------------------------------
# üé¨ Obtener una pel√≠cula espec√≠fica
GET {{catalogUrl}}/Movies/1

### ------------------------------------------------------------------------
# üë• Obtener todos los clientes
GET {{catalogUrl}}/Customers

### ------------------------------------------------------------------------
# üë• Obtener un cliente espec√≠fico
GET {{catalogUrl}}/Customers/1

### ------------------------------------------------------------------------
# üìä Obtener estad√≠sticas de pel√≠culas
GET {{catalogUrl}}/getMovieStats()

### ------------------------------------------------------------------------
# üìã Obtener todos los alquileres (con datos expandidos)
GET {{catalogUrl}}/Rentals?$expand=movie,customer

### ------------------------------------------------------------------------
# üìã Obtener alquileres activos solamente
GET {{catalogUrl}}/Rentals?$filter=status eq 'ACTIVE'&$expand=movie,customer

### ------------------------------------------------------------------------
# üé¨ Filtrar pel√≠culas por g√©nero
GET {{catalogUrl}}/Movies?$filter=genre eq 'Drama'

### ------------------------------------------------------------------------
# üé¨ Ordenar pel√≠culas por veces alquiladas (descendente)
GET {{catalogUrl}}/Movies?$orderby=rentedCount desc

### ------------------------------------------------------------------------
# üé¨ Obtener pel√≠culas con stock disponible
GET {{catalogUrl}}/Movies?$filter=stock gt 0

### ------------------------------------------------------------------------
# üõí ALQUILAR UNA PEL√çCULA - El Padrino (ID=1) para Juan P√©rez (ID=1)
POST {{catalogUrl}}/rentMovie
Content-Type: application/json

{
  "movieId": "1",
  "customerId": "1", 
  "quantity": 1
}

### ------------------------------------------------------------------------
# üõí ALQUILAR M√öLTIPLES COPIAS - Matrix (ID=3) para Mar√≠a Gonz√°lez (ID=2)
POST {{catalogUrl}}/rentMovie
Content-Type: application/json

{
  "movieId": "3",
  "customerId": "2",
  "quantity": 2
}

### ------------------------------------------------------------------------
# ‚ùå PROBAR ERROR - Intentar alquilar m√°s stock del disponible
POST {{catalogUrl}}/rentMovie
Content-Type: application/json

{
  "movieId": "1",
  "customerId": "1",
  "quantity": 10
}

### ------------------------------------------------------------------------
# ‚ùå PROBAR ERROR - Pel√≠cula inexistente
POST {{catalogUrl}}/rentMovie
Content-Type: application/json

{
  "movieId": "999",
  "customerId": "1",
  "quantity": 1
}

### ------------------------------------------------------------------------
# ‚ùå PROBAR ERROR - Cliente inexistente
POST {{catalogUrl}}/rentMovie
Content-Type: application/json

{
  "movieId": "1",
  "customerId": "999",
  "quantity": 1
}

### ------------------------------------------------------------------------
# üîÑ Verificar el stock despu√©s de alquilar (deber√≠a haber bajado)
GET {{catalogUrl}}/Movies/1

### ------------------------------------------------------------------------
# üìã Ver alquileres creados
GET {{catalogUrl}}/Rentals?$expand=movie,customer&$orderby=createdAt desc

### ------------------------------------------------------------------------
# üîô DEVOLVER PEL√çCULA - Usar ID del alquiler (cambiar por el ID real)
# NOTA: Despu√©s de crear alquileres, revisa el ID en la respuesta anterior
POST {{catalogUrl}}/returnRental
Content-Type: application/json

{
  "rentalId": "1a84af2c-f0d1-4107-8a95-2299d0149c76"
}

### ------------------------------------------------------------------------
# ‚ùå PROBAR ERROR - Intentar devolver alquiler inexistente
POST {{catalogUrl}}/returnRental
Content-Type: application/json

{
  "rentalId": "999"
}

### ------------------------------------------------------------------------
# ‚ùå PROBAR ERROR - Intentar devolver el mismo alquiler dos veces
POST {{catalogUrl}}/returnRental
Content-Type: application/json

{
  "rentalId": "1"
}

### ------------------------------------------------------------------------
# üîÑ Verificar que el stock se repuso despu√©s de devolver
GET {{catalogUrl}}/Movies/1

### ------------------------------------------------------------------------
# üìä Ver estad√≠sticas actualizadas
GET {{catalogUrl}}/getMovieStats()

### ------------------------------------------------------------------------
# üìã Ver estado final de todos los alquileres
GET {{catalogUrl}}/Rentals?$expand=movie,customer&$orderby=createdAt desc

### ------------------------------------------------------------------------
# üé¨ Ver estado final de todas las pel√≠culas
GET {{catalogUrl}}/Movies?$orderby=rentedCount desc

### ------------------------------------------------------------------------
# üîç CONSULTAS AVANZADAS CON ODATA

# Pel√≠culas con m√°s de 10 alquileres
GET {{catalogUrl}}/Movies?$filter=rentedCount gt 10

### ------------------------------------------------------------------------
# Top 3 pel√≠culas m√°s alquiladas
GET {{catalogUrl}}/Movies?$orderby=rentedCount desc&$top=3

### ------------------------------------------------------------------------
# Pel√≠culas de Ciencia Ficci√≥n con stock disponible
GET {{catalogUrl}}/Movies?$filter=genre eq 'Ciencia Ficci√≥n' and stock gt 0

### ------------------------------------------------------------------------
# Alquileres de un cliente espec√≠fico
GET {{catalogUrl}}/Rentals?$filter=customer_ID eq '1'&$expand=movie

### ------------------------------------------------------------------------
# Alquileres de una pel√≠cula espec√≠fica
GET {{catalogUrl}}/Rentals?$filter=movie_ID eq '1'&$expand=customer

### ------------------------------------------------------------------------
# üìä CREAR CLIENTE NUEVO (opcional)
POST {{catalogUrl}}/Customers
Content-Type: application/json

{
  "name": "Pedro Ram√≠rez",
  "email": "pedro.ramirez@email.com",
  "phone": "+54-381-6789012",
  "address": "Av. Sarmiento 987 - San Miguel de Tucum√°n"
}

### ------------------------------------------------------------------------
# üé¨ CREAR PEL√çCULA NUEVA (opcional)
POST {{catalogUrl}}/Movies
Content-Type: application/json

{
  "title": "Spider-Man: No Way Home",
  "genre": "Acci√≥n",
  "director": "Jon Watts",
  "year": 2021,
  "description": "Peter Parker debe enfrentar villanos de universos paralelos",
  "stock": 3,
  "rentedCount": 0,
  "price": 3.75
}